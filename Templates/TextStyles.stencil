{% include "FileHeader.stencil" %}
{% if textStyles %}
{% set accessModifier %}{% if options.publicAccess %}public{% else %}internal{% endif %}{% endset %}
{% set styleTypeName %}{{ options.styleTypeName|default:"TextStyle" }}{% endset %}
{% set fontTypeName %}{{ options.fontTypeName|default:"UIFont" }}{% endset %}
{% set colorTypeName %}{{ options.colorTypeName|default:"UIColor" }}{% endset %}
{% set strikethroughStyle %}{{ options.strikethroughStyle|default:"single" }}{% endset %}
{% set underlineStyle %}{{ options.underlineStyle|default:"single" }}{% endset %}
{% macro propertyName name %}{{ name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords }}{% endmacro %}
{% set optionalFontTypeName %}{{ fontTypeName }}?{% endset %}
{% set optionalColorTypeName %}{{ colorTypeName }}?{% endset %}
{% macro styleMutator propertyName propertyTypeName %}
    {% set methodName %}with{{ propertyName|upperFirstLetter }}{% endset %}
    {{ accessModifier }} func {{ methodName }}(_ {{ propertyName }}: {{ propertyTypeName }}) -> {{ styleTypeName }} {
        return {{ styleTypeName }}(
            font: font,
            color: color,
            backgroundColor: backgroundColor,
            strikethrough: strikethrough,
            underline: underline,
            paragraphSpacing: paragraphSpacing,
            paragraphIndent: paragraphIndent,
            lineHeight: lineHeight,
            letterSpacing: letterSpacing,
            lineBreakMode: lineBreakMode,
            alignment: alignment
        )
    }
{% endmacro %}

#if canImport(UIKit)
import UIKit
#else
import AppKit
#endif

{{ accessModifier }} struct {{ styleTypeName }}: Equatable {

    // MARK: - Type Properties
{% for style in textStyles %}

    /// {{ style.name }}
    ///
    /// {{ style.font|fontInfo }}
    /// Color: {% if style.colorStyleName %}{{ style.colorStyleName }}; {% endif %}{{ style.color|colorInfo|lowerFirstWord }}
    /// Strikethrough: {{ style.strikethrough }}
    /// Underline: {{ style.underline }}
    /// Paragraph spacing: {{ style.paragraphSpacing|default:"default" }}
    /// Paragraph indent: {{ style.paragraphIndent|default:"default" }}
    /// Line height: {{ style.lineHeight|default:"default" }}
    /// Letter spacing: {{ style.letterSpacing|default:"default" }}
    {{ accessModifier }} static let {% call propertyName style.name %} = {{ styleTypeName }}(
        font: {{ fontTypeName }}(
            name: "{{ style.font.name }}",
            size: {{ style.font.size }}
        ),
        color: {{ colorTypeName }}(
            red: {{ style.color.red }},
            green: {{ style.color.green }},
            blue: {{ style.color.blue }},
            alpha: {{ style.color.alpha }}
        ),
        strikethrough: {{ style.strikethrough }},
        underline: {{ style.underline }},
        paragraphSpacing: {{ style.paragraphSpacing|default:"nil" }},
        paragraphIndent: {{ style.paragraphIndent|default:"nil" }},
        lineHeight: {{ style.lineHeight|default:"nil" }},
        letterSpacing: {{ style.letterSpacing|default:"nil" }}
    )
{% endfor %}

    // MARK: - Instance Properties

    {{ accessModifier }} let font: {{ optionalFontTypeName }}
    {{ accessModifier }} let color: {{ optionalColorTypeName }}
    {{ accessModifier }} let backgroundColor: {{ optionalColorTypeName }}
    {{ accessModifier }} let strikethrough: Bool
    {{ accessModifier }} let underline: Bool
    {{ accessModifier }} let paragraphSpacing: CGFloat?
    {{ accessModifier }} let paragraphIndent: CGFloat?
    {{ accessModifier }} let lineHeight: CGFloat?
    {{ accessModifier }} let letterSpacing: CGFloat?
    {{ accessModifier }} let lineBreakMode: NSLineBreakMode?
    {{ accessModifier }} let alignment: NSTextAlignment?

    // MARK: - Initializers

    {{ accessModifier }} init(
        font: {{ optionalFontTypeName }} = nil,
        color: {{ optionalColorTypeName }} = nil,
        backgroundColor: {{ optionalColorTypeName }} = nil,
        strikethrough: Bool = false,
        underline: Bool = false,
        paragraphSpacing: CGFloat? = nil,
        paragraphIndent: CGFloat? = nil,
        lineHeight: CGFloat? = nil,
        letterSpacing: CGFloat? = nil,
        lineBreakMode: NSLineBreakMode? = nil,
        alignment: NSTextAlignment? = nil
    ) {
        self.font = font
        self.color = color
        self.backgroundColor = backgroundColor
        self.strikethrough = strikethrough
        self.underline = underline
        self.paragraphSpacing = paragraphSpacing
        self.paragraphIndent = paragraphIndent
        self.lineHeight = lineHeight
        self.letterSpacing = letterSpacing
        self.lineBreakMode = lineBreakMode
        self.alignment = alignment
    }

    // MARK: - Instance Methods

    private func attributes(paragraphStyle: NSParagraphStyle?) -> [NSAttributedString.Key: Any] {
        var attributes: [NSAttributedString.Key: Any] = [:]

        if let paragraphStyle = paragraphStyle {
            attributes[.paragraphStyle] = paragraphStyle
        }

        if let font = font {
            attributes[.font] = font
        }

        if let color = color {
            attributes[.foregroundColor] = color
        }

        if let backgroundColor = backgroundColor {
            attributes[.backgroundColor] = backgroundColor
        }

        if strikethrough {
            attributes[.strikethroughStyle] = NSUnderlineStyle.{{ strikethroughStyle }}.rawValue
        }

        if underline {
            attributes[.underlineStyle] = NSUnderlineStyle.{{ underlineStyle }}.rawValue
        }

        if let letterSpacing = letterSpacing {
            attributes[.kern] = letterSpacing
        }

        return attributes
    }

    // MARK: -

    {{ accessModifier }} func paragraphStyle() -> NSParagraphStyle {
        let paragraphStyle = NSMutableParagraphStyle()

        if let lineHeight = lineHeight {
            if let font = font {
                paragraphStyle.lineSpacing = (lineHeight - font.lineHeight) * 0.5
                paragraphStyle.minimumLineHeight = lineHeight - paragraphStyle.lineSpacing
            } else {
                paragraphStyle.lineSpacing = 0.0
                paragraphStyle.minimumLineHeight = lineHeight
            }

            paragraphStyle.maximumLineHeight = paragraphStyle.minimumLineHeight
        }

        if let paragraphSpacing = paragraphSpacing {
            paragraphStyle.paragraphSpacing = paragraphSpacing
        }

        if let paragraphIndent = paragraphIndent {
            paragraphStyle.firstLineHeadIndent = paragraphIndent
        }

        if let lineBreakMode = lineBreakMode {
            paragraphStyle.lineBreakMode = lineBreakMode
        }

        if let alignment = alignment {
            paragraphStyle.alignment = alignment
        }

        return paragraphStyle
    }

    {{ accessModifier }} func attributes(includingParagraphStyle: Bool = true) -> [NSAttributedString.Key: Any] {
        if includingParagraphStyle {
            return attributes(paragraphStyle: paragraphStyle())
        } else {
            return attributes(paragraphStyle: nil)
        }
    }

    {{ accessModifier }} func attributedString(
        _ string: String,
        includingParagraphStyle: Bool = true
    ) -> NSAttributedString {
        return NSAttributedString(string: string, style: self, includingParagraphStyle: includingParagraphStyle)
    }

    // MARK: -

    {% call styleMutator "font" optionalFontTypeName %}

    {% call styleMutator "color" optionalColorTypeName %}

    {% call styleMutator "backgroundColor" optionalColorTypeName %}

    {% call styleMutator "strikethrough" "Bool" %}

    {% call styleMutator "underline" "Bool" %}

    {% call styleMutator "paragraphSpacing" "CGFloat?" %}

    {% call styleMutator "paragraphIndent" "CGFloat?" %}

    {% call styleMutator "lineHeight" "CGFloat?" %}

    {% call styleMutator "letterSpacing" "CGFloat?" %}

    {% call styleMutator "lineBreakMode" "NSLineBreakMode?" %}

    {% call styleMutator "alignment" "NSTextAlignment?" %}
}

{{ accessModifier }} extension NSAttributedString {

    // MARK: - Initializers

    convenience init(string: String, style: {{ styleTypeName }}, includingParagraphStyle: Bool = true) {
        self.init(string: string, attributes: style.attributes(includingParagraphStyle: includingParagraphStyle))
    }
}
{% else %}
// No text style found
{% endif %}
