// swiftlint:disable all
{% if colorStyles %}
{% set accessModifier %}{% if options.publicAccess %}public{% else %}internal{% endif %}{% endset %}
{% set styleTypeName %}{{options.styleTypeName|default:"ColorStyle"}}{% endset %}
{% set colorTypeName %}{{options.colorTypeName|default:"UIColor"}}{% endset %}
{% macro rgbaHex color %}0x{{color.red}}{{color.green}}{{color.blue}}{{color.alpha}}{% endmacro %}
{% macro rgbHexString color %}#{{color.red}}{{color.green}}{{color.blue}}{% endmacro %}
{% macro rgbaHexString color %}{% call rgbHexString color %}{{color.alpha}}{% endmacro %}
{% macro rgbString color %}{{color.red|hexToInt}} {{color.green|hexToInt}} {{color.blue|hexToInt}}{% endmacro %}
{% macro rgbaString color %}{% call rgbString color %}, {{color.alpha|hexToInt|int255toFloat|percent}}{% endmacro %}
{% macro stylePropertyName style %}{{style.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}{% endmacro %}
#if canImport(UIKit)
import UIKit
#else
import AppKit
#endif

{{accessModifier}} struct {{styleTypeName}} {

    // MARK: - Type Properties
{% for style in colorStyles %}

    /// {{style.name}}
    ///
    /// Hex {% call rgbaHexString style.color %}; rgba {% call rgbaString style.color %}
    {{accessModifier}} static let {% call stylePropertyName style %} = {{styleTypeName}}(
        name: "{{style.name}}",
        rgbaHex: {% call rgbaHex style.color %}
    )
{% endfor %}

    // MARK: - Instance Properties

    {{accessModifier}} let name: String
    {{accessModifier}} let rgbaHex: UInt32

    {{accessModifier}} var color: {{colorTypeName}} {
        return {{colorTypeName}}(style: self)
    }

    // MARK: - Initializers

    {{accessModifier}} init(name: String, rgbaHex: UInt32) {
        self.name = name
        self.rgbaHex = rgbaHex
    }
}

extension {{colorTypeName}} {

    // MARK: - Initializers

    private convenience init(rgbaHex: UInt32) {
        self.init(
            red: CGFloat((rgbaHex >> 24) & 0xFF) / 255.0,
            green: CGFloat((rgbaHex >> 16) & 0xFF) / 255.0,
            blue: CGFloat((rgbaHex >> 8) & 0xFF) / 255.0,
            alpha: CGFloat(rgbaHex & 0xFF) / 255.0
        )
    }

    {{accessModifier}} convenience init(style: {{styleTypeName}}) {
        self.init(rgbaHex: style.rgbaHex)
    }
}
{% else %}
// No color style found
{% endif %}
// swiftlint:enable all
